// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillAssessmentAdmin.Data;

#nullable disable

namespace SkillAssessmentAdmin.Migrations
{
    [DbContext(typeof(SkillAssessmentDbContext))]
    [Migration("20230628045233_InitialCreate6")]
    partial class InitialCreate6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SkillAssessmentAdmin.Models.AddQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("TopicId");

                    b.ToTable("AddQuestions");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.AssessmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfSubmission")
                        .HasColumnType("Date");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SkippedAnswer")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WrongAnswer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AssessmentHistorys");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.EmailHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("Date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailHistory");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.QuestionPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("AssessmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddQuestionId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionPages");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Email")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.UserAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("AssessmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTopics")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentHistoryId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAssessments");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.UserRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfRequest")
                        .HasColumnType("Date");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.AddQuestion", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.QuestionType", null)
                        .WithMany("AddQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentAdmin.Models.Skill", null)
                        .WithMany("AddQuestions")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentAdmin.Models.Topic", null)
                        .WithMany("AddQuestions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.EmailHistory", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.Assessment", null)
                        .WithMany("EmailHistorys")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentAdmin.Models.User", null)
                        .WithMany("EmailHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.QuestionPage", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.AddQuestion", null)
                        .WithMany("QuestionPages")
                        .HasForeignKey("AddQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentAdmin.Models.Assessment", null)
                        .WithMany("QuestionPages")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("SkillAssessmentAdmin.Models.User", null)
                        .WithMany("QuestionPages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Topic", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.Department", null)
                        .WithMany("Topics")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.User", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.Department", null)
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.UserAssessment", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.AssessmentHistory", null)
                        .WithMany("UserAssessments")
                        .HasForeignKey("AssessmentHistoryId");

                    b.HasOne("SkillAssessmentAdmin.Models.Assessment", null)
                        .WithMany("UserAssessments")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("SkillAssessmentAdmin.Models.User", null)
                        .WithMany("UserAssessments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.UserRequest", b =>
                {
                    b.HasOne("SkillAssessmentAdmin.Models.Assessment", null)
                        .WithMany("UserRequests")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("SkillAssessmentAdmin.Models.User", null)
                        .WithMany("UserRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.AddQuestion", b =>
                {
                    b.Navigation("QuestionPages");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Assessment", b =>
                {
                    b.Navigation("EmailHistorys");

                    b.Navigation("QuestionPages");

                    b.Navigation("UserAssessments");

                    b.Navigation("UserRequests");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.AssessmentHistory", b =>
                {
                    b.Navigation("UserAssessments");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Department", b =>
                {
                    b.Navigation("Topics");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.QuestionType", b =>
                {
                    b.Navigation("AddQuestions");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Skill", b =>
                {
                    b.Navigation("AddQuestions");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.Topic", b =>
                {
                    b.Navigation("AddQuestions");
                });

            modelBuilder.Entity("SkillAssessmentAdmin.Models.User", b =>
                {
                    b.Navigation("EmailHistorys");

                    b.Navigation("QuestionPages");

                    b.Navigation("UserAssessments");

                    b.Navigation("UserRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
